name: 98-Infra

on:
  workflow_dispatch:

jobs:
  deploy_infra:
    runs-on: ubuntu-latest
    permissions:
        id-token: write
        contents: read
    # defaults:
    #   run:
    #     working-directory: ./scripts
    steps:
      - uses: actions/checkout@v4
      
      - name: Azure login in AKS Subscription # https://learn.microsoft.com/en-us/azure/developer/github/connect-from-azure
        uses: azure/login@v1
        with:
          client-id: "${{secrets.AAD_CLIENT_ID}}"
          tenant-id: "${{secrets.AAD_TENANT_ID}}"
          subscription-id: "${{secrets.AKS_SUBSCRIPTION_ID}}"

      - name: Create Azure resource group
        working-directory: ./scripts/deployment/templates/bicep/
        run: |
            az deployment sub create \
              -l "${{secrets.AZURE_LOCATION}}" \
              --template-file ./resource_groups.bicep \
              --parameters location="${{secrets.AZURE_LOCATION}}" \
                           aksRG="${{secrets.AKS_RESOURCE_GROUP}}" \
                           aksTags="${{vars.AKS_RESOURCE_TAGS}}" \
                           containerRegistrySubscriptionId="${{secrets.CONTAINER_REGISTRY_SUBSCRIPTION_ID}}" \
                           containerRegistryRG="${{secrets.CONTAINER_REGISTRY_RESOURCE_GROUP}}" \
                           containerRegistryTags="${{vars.CONTAINER_REGISTRY_RESOURCE_TAGS}}" \
                           pgsqlSubscriptionId="${{secrets.PGSQL_SUBSCRIPTION_ID}}" \
                           pgsqlRG="${{secrets.PGSQL_RESOURCE_GROUP}}" \
                           pgsqlTags="${{vars.PGSQL_RESOURCE_TAGS}}" \
                           logAnalyticsSubscriptionId="${{secrets.LOG_ANALYTICS_WRKSPC_SUBSCRIPTION_ID}}" \
                           logAnalyticsRG="${{secrets.LOG_ANALYTICS_WRKSPC_RESOURCE_GROUP}}" \
                           logAnalyticsTags="${{vars.LOG_ANALYTICS_WRKSPC_RESOURCE_TAGS}}"
        
      - name: Deploy Azure resources
        id: deployment
        working-directory: ./scripts/deployment/templates/bicep/
        run: |
          clientIP=`dig +short myip.opendns.com @resolver1.opendns.com.`
          echo "DEPLOYMENT_CLIENT_IP=${clientIP}" >> $GITHUB_OUTPUT
          echo "Client IP: $clientIP"

          if [[ -z "${{secrets.DBA_GROUP_NAME}}" ]]; then
            echo "DBA Group name is not set"
            exit 1
          fi

          if [[ -z "${{secrets.AKS_ADMIN_GROUP_NAME}}" ]]; then
            echo "AKS Admin Group name is not set"
            exit 1
          fi

          if [[ -z "${{secrets.TODO_APP_VIEW_AD_GROUP_NAME}}" ]]; then
            echo "TODO_APP Viewer Group name is not set"
            exit 1
          fi

          if [[ -z "${{secrets.TODO_APP_EDIT_AD_GROUP_NAME}}" ]]; then
            echo "TODO_APP Admin Group name is not set"
            exit 1
          fi
          if [[ -z "${{secrets.PET_CLINIC_VIEW_AD_GROUP_NAME}}" ]]; then
            echo "PET_CLINIC Viewer Group name is not set"
            exit 1
          fi

          if [[ -z "${{secrets.PET_CLINIC_APP_EDIT_AD_GROUP_NAME}}" ]]; then
            echo "PET_CLINIC Admin Group name is not set"
            exit 1
          fi

          if [[ -z "${{secrets.IAAS_PGSQL_VIEW_AD_GROUP_NAME}}" ]]; then
            echo "IaaS PGSQL Viewer Group name is not set"
            exit 1
          fi

          if [[ -z "${{secrets.IAAS_PGSQL_APP_EDIT_AD_GROUP_NAME}}" ]]; then
            echo "IaaS PGSQL Admin Group name is not set"
            exit 1
          fi

          if [[ -z "${{secrets.IAAS_RABBIT_MQ_VIEW_AD_GROUP_NAME}}" ]]; then
            echo "IaaS PGSQL_MQ Viewer Group name is not set"
            exit 1
          fi

          if [[ -z "${{secrets.IAAS_RABBIT_MQ_APP_EDIT_AD_GROUP_NAME}}" ]]; then
            echo "IaaS PGSQL_MQ Admin Group name is not set"
            exit 1
          fi


          TODO_APP_VIEW_AD_GROUP_ID=`az ad group show --group "${{secrets.TODO_APP_VIEW_AD_GROUP_NAME}}" --query '[id]' -o tsv`
          echo "TODO_APP_VIEW_AD_GROUP_ID=${TODO_APP_VIEW_AD_GROUP_ID}" >> $GITHUB_OUTPUT
          
          TODO_APP_EDIT_AD_GROUP_ID=`az ad group show --group "${{secrets.TODO_APP_EDIT_AD_GROUP_NAME}}" --query '[id]' -o tsv`
          echo "TODO_APP_EDIT_AD_GROUP_ID=${TODO_APP_EDIT_AD_GROUP_ID}" >> $GITHUB_OUTPUT
          
          PET_CLINIC_VIEW_AD_GROUP_ID=`az ad group show --group "${{secrets.PET_CLINIC_VIEW_AD_GROUP_NAME}}" --query '[id]' -o tsv`
          echo "PET_CLINIC_VIEW_AD_GROUP_ID=${PET_CLINIC_VIEW_AD_GROUP_ID}" >> $GITHUB_OUTPUT
          
          PET_CLINIC_APP_EDIT_AD_GROUP_ID=`az ad group show --group "${{secrets.PET_CLINIC_APP_EDIT_AD_GROUP_NAME}}" --query '[id]' -o tsv`
          echo "PET_CLINIC_APP_EDIT_AD_GROUP_ID=${PET_CLINIC_APP_EDIT_AD_GROUP_ID}" >> $GITHUB_OUTPUT
          
          IAAS_PGSQL_VIEW_AD_GROUP_ID=`az ad group show --group "${{secrets.IAAS_PGSQL_VIEW_AD_GROUP_NAME}}" --query '[id]' -o tsv`
          echo "IAAS_PGSQL_VIEW_AD_GROUP_ID=${IAAS_PGSQL_VIEW_AD_GROUP_ID}" >> $GITHUB_OUTPUT
          
          IAAS_PGSQL_APP_EDIT_AD_GROUP_ID=`az ad group show --group "${{secrets.IAAS_PGSQL_APP_EDIT_AD_GROUP_NAME}}" --query '[id]' -o tsv`
          echo "IAAS_PGSQL_APP_EDIT_AD_GROUP_ID=${IAAS_PGSQL_APP_EDIT_AD_GROUP_ID}" >> $GITHUB_OUTPUT
          
          IAAS_RABBIT_MQ_VIEW_AD_GROUP_ID=`az ad group show --group "${{secrets.IAAS_RABBIT_MQ_VIEW_AD_GROUP_NAME}}" --query '[id]' -o tsv`
          echo "IAAS_RABBIT_MQ_VIEW_AD_GROUP_ID=${IAAS_RABBIT_MQ_VIEW_AD_GROUP_ID}" >> $GITHUB_OUTPUT
          
          IAAS_RABBIT_MQ_APP_EDIT_AD_GROUP_ID=`az ad group show --group "${{secrets.IAAS_RABBIT_MQ_APP_EDIT_AD_GROUP_NAME}}" --query '[id]' -o tsv`
          echo "IAAS_RABBIT_MQ_APP_EDIT_AD_GROUP_ID=${IAAS_RABBIT_MQ_APP_EDIT_AD_GROUP_ID}" >> $GITHUB_OUTPUT

          dbaGroupId=`az ad group show --group "${{secrets.DBA_GROUP_NAME}}" --query '[id]' -o tsv`
          echo "DBA_GROUP_ID=${dbaGroupId}" >> $GITHUB_OUTPUT
          aksGroupId=`az ad group show --group "${{secrets.AKS_ADMIN_GROUP_NAME}}" --query '[id]' -o tsv`
          echo "AKS_ADMIN_GROUP_ID=${aksGroupId}" >> $GITHUB_OUTPUT

          echo "Deploying with the following parameters:"
          echo "DBA Group Name: '${{secrets.DBA_GROUP_NAME}}'"
          echo "DBA Group Id: $dbaGroupId"
          echo "AKS Service name: '${{secrets.AKS_NAME}}'"
          echo "Deployment client IP Address: '${clientIP}'"
          
          deploymentOutput=`az deployment group create \
                                        --resource-group ${{secrets.AKS_RESOURCE_GROUP}} \
                                        --template-file ./main.bicep \
                                        --parameters aksName="${{secrets.AKS_NAME}}" \
                                                     aksAdminGroupObjectId="${aksGroupId}" \
                                                     aksTags="${{vars.AKS_RESOURCE_TAGS}}" \
                                                     containerRegistryName="${{secrets.CONTAINER_REGISTRY_NAME}}" \
                                                     containerRegistrySubscriptionId="${{secrets.CONTAINER_REGISTRY_SUBSCRIPTION_ID}}" \
                                                     containerRegistryRG="${{secrets.CONTAINER_REGISTRY_RESOURCE_GROUP}}" \
                                                     containerRegistryTags="${{vars.CONTAINER_REGISTRY_RESOURCE_TAGS}}" \
                                                     pgsqlName="${{secrets.PGSQL_NAME}}" \
                                                     pgsqlAADAdminGroupName="${{secrets.DBA_GROUP_NAME}}" \
                                                     pgsqlAADAdminGroupObjectId="${dbaGroupId}" \
                                                     pgsqlSubscriptionId="${{secrets.PGSQL_SUBSCRIPTION_ID}}" \
                                                     pgsqlRG="${{secrets.PGSQL_RESOURCE_GROUP}}" \
                                                     pgsqlTags="${{vars.PGSQL_RESOURCE_TAGS}}" \
                                                     logAnalyticsName="${{secrets.LOG_ANALYTICS_WRKSPC_NAME}}" \
                                                     logAnalyticsSubscriptionId="${{secrets.LOG_ANALYTICS_WRKSPC_SUBSCRIPTION_ID}}" \
                                                     logAnalyticsRG="${{secrets.LOG_ANALYTICS_WRKSPC_RESOURCE_GROUP}}" \
                                                     logAnalyticsTags="${{vars.LOG_ANALYTICS_WRKSPC_RESOURCE_TAGS}}" \
                                                     petClinicGitConfigRepoUri="${{vars.PET_CLINIC_GIT_CONFIG_REPO_URI}}" \
                                                     petClinicGitConfigRepoUserName="${{secrets.PET_CLINIC_GIT_CONFIG_REPO_USERNAME}}" \
                                                     petClinicGitConfigRepoPassword="${{secrets.PET_CLINIC_GIT_CONFIG_REPO_PASSWORD}}" \
                                                     deploymentClientIPAddress="${clientIP}" \
                                                     location="${{secrets.AZURE_LOCATION}}"`
          
          #azurerm_kubernetes_cluster.aks.network_profile[0].load_balancer_profile[0].effective_outbound_ips
          todoAppUserManagedIdentityName=`echo $deploymentOutput|jq ".properties.outputs.todoAppUserManagedIdentityName.value"`
          todoAppUserManagedIdentityPrincipalId=`echo $deploymentOutput|jq ".properties.outputs.todoAppUserManagedIdentityPrincipalId.value"`
          todoAppUserManagedIdentityClientId=`echo $deploymentOutput|jq ".properties.outputs.todoAppUserManagedIdentityClientId.value"`
          todoAppDbName=`echo $deploymentOutput|jq ".properties.outputs.todoAppDbName.value"`
          todoAppDbUserName=`echo $deploymentOutput|jq ".properties.outputs.todoAppDbUserName.value"`

          petClinicAdminSvcUserManagedIdentityName=`echo $deploymentOutput|jq ".properties.outputs.petClinicAdminSvcUserManagedIdentityName.value"`
          petClinicAdminSvcUserManagedIdentityPrincipalId=`echo $deploymentOutput|jq ".properties.outputs.petClinicAdminSvcUserManagedIdentityPrincipalId.value"`
          petClinicAdminSvcUserManagedIdentityClientId=`echo $deploymentOutput|jq ".properties.outputs.petClinicAdminSvcUserManagedIdentityClientId.value"`

          petClinicApiGWSvcUserManagedIdentityName=`echo $deploymentOutput|jq ".properties.outputs.petClinicApiGWSvcUserManagedIdentityName.value"`
          petClinicApiGWSvcUserManagedIdentityPrincipalId=`echo $deploymentOutput|jq ".properties.outputs.petClinicApiGWSvcUserManagedIdentityPrincipalId.value"`
          petClinicApiGWSvcUserManagedIdentityClientId=`echo $deploymentOutput|jq ".properties.outputs.petClinicApiGWSvcUserManagedIdentityClientId.value"`

          petClinicConfigSvcUserManagedIdentityName=`echo $deploymentOutput|jq ".properties.outputs.petClinicConfigSvcUserManagedIdentityName.value"`
          petClinicConfigSvcUserManagedIdentityPrincipalId=`echo $deploymentOutput|jq ".properties.outputs.petClinicConfigSvcUserManagedIdentityPrincipalId.value"`
          petClinicConfigSvcUserManagedIdentityClientId=`echo $deploymentOutput|jq ".properties.outputs.petClinicConfigSvcUserManagedIdentityClientId.value"`

          petClinicCustsSvcUserManagedIdentityName=`echo $deploymentOutput|jq ".properties.outputs.petClinicCustsSvcUserManagedIdentityName.value"`
          petClinicCustsSvcUserManagedIdentityPrincipalId=`echo $deploymentOutput|jq ".properties.outputs.petClinicCustsSvcUserManagedIdentityPrincipalId.value"`
          petClinicCustsSvcUserManagedIdentityClientId=`echo $deploymentOutput|jq ".properties.outputs.petClinicCustsSvcUserManagedIdentityClientId.value"`
          petClinicCustsSvcDbName=`echo $deploymentOutput|jq ".properties.outputs.petClinicCustsSvcDbName.value"`
          petClinicCustsSvcDbUserName=`echo $deploymentOutput|jq ".properties.outputs.petClinicCustsSvcDbUserName.value"`

          petClinicDiscoSvcUserManagedIdentityName=`echo $deploymentOutput|jq ".properties.outputs.petClinicDiscoSvcUserManagedIdentityName.value"`
          petClinicDiscoSvcUserManagedIdentityPrincipalId=`echo $deploymentOutput|jq ".properties.outputs.petClinicDiscoSvcUserManagedIdentityPrincipalId.value"`
          petClinicDiscoSvcUserManagedIdentityClientId=`echo $deploymentOutput|jq ".properties.outputs.petClinicDiscoSvcUserManagedIdentityClientId.value"`

          petClinicVetsSvcUserManagedIdentityName=`echo $deploymentOutput|jq ".properties.outputs.petClinicVetsSvcUserManagedIdentityName.value"`
          petClinicVetsSvcUserManagedIdentityPrincipalId=`echo $deploymentOutput|jq ".properties.outputs.petClinicVetsSvcUserManagedIdentityPrincipalId.value"`
          petClinicVetsSvcUserManagedIdentityClientId=`echo $deploymentOutput|jq ".properties.outputs.petClinicVetsSvcUserManagedIdentityClientId.value"`
          petClinicVetsSvcDbUserName=`echo $deploymentOutput|jq ".properties.outputs.petClinicVetsSvcDbUserName.value"`
          petClinicVetsSvcDbName=`echo $deploymentOutput|jq ".properties.outputs.petClinicVetsSvcDbName.value"`

          petClinicVisitsSvcUserManagedIdentityName=`echo $deploymentOutput|jq ".properties.outputs.petClinicVisitsSvcUserManagedIdentityName.value"`
          petClinicVisitsSvcUserManagedIdentityPrincipalId=`echo $deploymentOutput|jq ".properties.outputs.petClinicVisitsSvcUserManagedIdentityPrincipalId.value"`
          petClinicVisitsSvcUserManagedIdentityClientId=`echo $deploymentOutput|jq ".properties.outputs.petClinicVisitsSvcUserManagedIdentityClientId.value"`
          petClinicVisitsSvcDbUserName=`echo $deploymentOutput|jq ".properties.outputs.petClinicVisitsSvcDbUserName.value"`
          petClinicVisitsSvcDbName=`echo $deploymentOutput|jq ".properties.outputs.petClinicVisitsSvcDbName.value"`

          pgsqlUpdatedFirewallRules=`echo $deploymentOutput|jq ".properties.outputs.pgsqlUpdatedFirewallRulesSet.value"`

          echo "TODO_APP_USER_MI_NAME: ${todoAppUserManagedIdentityName}"
          echo "TODO_APP_USER_MI_NAME=${todoAppUserManagedIdentityName}" >> $GITHUB_OUTPUT
          echo "TODO_APP_USER_MI_PRINCIPAL_ID: ${todoAppUserManagedIdentityPrincipalId}"
          echo "TODO_APP_USER_MI_PRINCIPAL_ID=${todoAppUserManagedIdentityPrincipalId}" >> $GITHUB_OUTPUT
          echo "TODO_APP_USER_MI_CLIENT_ID: ${todoAppUserManagedIdentityClientId}"
          echo "TODO_APP_USER_MI_CLIENT_ID=${todoAppUserManagedIdentityClientId}" >> $GITHUB_OUTPUT
          echo "TODO_APP_DB_NAME: ${todoAppDbName}"
          echo "TODO_APP_DB_NAME=${todoAppDbName}" >> $GITHUB_OUTPUT
          echo "TODO_APP_DB_USER_NAME: ${todoAppDbUserName}"
          echo "TODO_APP_DB_USER_NAME=${todoAppDbUserName}" >> $GITHUB_OUTPUT

          echo "PET_CLINIC_ADMIN_SVC_USER_MI_NAME: ${petClinicAdminSvcUserManagedIdentityName}"
          echo "PET_CLINIC_ADMIN_SVC_USER_MI_NAME=${petClinicAdminSvcUserManagedIdentityName}" >> $GITHUB_OUTPUT
          echo "PET_CLINIC_ADMIN_SVC_USER_MI_PRINCIPAL_ID: ${petClinicAdminSvcUserManagedIdentityPrincipalId}"
          echo "PET_CLINIC_ADMIN_SVC_USER_MI_PRINCIPAL_ID=${petClinicAdminSvcUserManagedIdentityPrincipalId}" >> $GITHUB_OUTPUT
          echo "PET_CLINIC_ADMIN_SVC_USER_MI_CLIENT_ID: ${petClinicAdminSvcUserManagedIdentityClientId}"
          echo "PET_CLINIC_ADMIN_SVC_USER_MI_CLIENT_ID=${petClinicAdminSvcUserManagedIdentityClientId}" >> $GITHUB_OUTPUT

          echo "PET_CLINIC_API_GW_SVC_USER_MI_NAME: ${petClinicApiGWSvcUserManagedIdentityName}"
          echo "PET_CLINIC_API_GW_SVC_USER_MI_NAME=${petClinicApiGWSvcUserManagedIdentityName}" >> $GITHUB_OUTPUT
          echo "PET_CLINIC_API_GW_SVC_USER_MI_PRINCIPAL_ID: ${petClinicApiGWSvcUserManagedIdentityPrincipalId}"
          echo "PET_CLINIC_API_GW_SVC_USER_MI_PRINCIPAL_ID=${petClinicApiGWSvcUserManagedIdentityPrincipalId}" >> $GITHUB_OUTPUT
          echo "PET_CLINIC_API_GW_SVC_USER_MI_CLIENT_ID: ${petClinicApiGWSvcUserManagedIdentityClientId}"
          echo "PET_CLINIC_API_GW_SVC_USER_MI_CLIENT_ID=${petClinicApiGWSvcUserManagedIdentityClientId}" >> $GITHUB_OUTPUT

          echo "PET_CLINIC_CONFIG_SVC_USER_MI_NAME: ${petClinicConfigSvcUserManagedIdentityName}"
          echo "PET_CLINIC_CONFIG_SVC_USER_MI_NAME=${petClinicConfigSvcUserManagedIdentityName}" >> $GITHUB_OUTPUT
          echo "PET_CLINIC_CONFIG_SVC_USER_MI_PRINCIPAL_ID: ${petClinicConfigSvcUserManagedIdentityPrincipalId}"
          echo "PET_CLINIC_CONFIG_SVC_USER_MI_PRINCIPAL_ID=${petClinicConfigSvcUserManagedIdentityPrincipalId}" >> $GITHUB_OUTPUT
          echo "PET_CLINIC_CONFIG_SVC_USER_MI_CLIENT_ID: ${petClinicConfigSvcUserManagedIdentityClientId}"
          echo "PET_CLINIC_CONFIG_SVC_USER_MI_CLIENT_ID=${petClinicConfigSvcUserManagedIdentityClientId}" >> $GITHUB_OUTPUT

          echo "PET_CLINIC_CUSTS_SVC_USER_MI_NAME: ${petClinicCustsSvcUserManagedIdentityName}"
          echo "PET_CLINIC_CUSTS_SVC_USER_MI_NAME=${petClinicCustsSvcUserManagedIdentityName}" >> $GITHUB_OUTPUT
          echo "PET_CLINIC_CUSTS_SVC_USER_MI_PRINCIPAL_ID: ${petClinicCustsSvcUserManagedIdentityPrincipalId}"
          echo "PET_CLINIC_CUSTS_SVC_USER_MI_PRINCIPAL_ID=${petClinicCustsSvcUserManagedIdentityPrincipalId}" >> $GITHUB_OUTPUT
          echo "PET_CLINIC_CUSTS_SVC_USER_MI_CLIENT_ID: ${petClinicCustsSvcUserManagedIdentityClientId}"
          echo "PET_CLINIC_CUSTS_SVC_USER_MI_CLIENT_ID=${petClinicCustsSvcUserManagedIdentityClientId}" >> $GITHUB_OUTPUT
          echo "PET_CLINIC_CUSTS_SVC_DB_NAME: ${petClinicCustsSvcDbName}"
          echo "PET_CLINIC_CUSTS_SVC_DB_NAME=${petClinicCustsSvcDbName}" >> $GITHUB_OUTPUT
          echo "PET_CLINIC_CUSTS_SVC_DB_USER_NAME: ${petClinicCustsSvcDbUserName}"
          echo "PET_CLINIC_CUSTS_SVC_DB_USER_NAME=${petClinicCustsSvcDbUserName}" >> $GITHUB_OUTPUT

          echo "PET_CLINIC_DISCO_SVC_USER_MI_NAME: ${petClinicDiscoSvcUserManagedIdentityName}"
          echo "PET_CLINIC_DISCO_SVC_USER_MI_NAME=${petClinicDiscoSvcUserManagedIdentityName}" >> $GITHUB_OUTPUT
          echo "PET_CLINIC_DISCO_SVC_USER_MI_PRINCIPAL_ID: ${petClinicDiscoSvcUserManagedIdentityPrincipalId}"
          echo "PET_CLINIC_DISCO_SVC_USER_MI_PRINCIPAL_ID=${petClinicDiscoSvcUserManagedIdentityPrincipalId}" >> $GITHUB_OUTPUT
          echo "PET_CLINIC_DISCO_SVC_USER_MI_CLIENT_ID: ${petClinicDiscoSvcUserManagedIdentityClientId}"
          echo "PET_CLINIC_DISCO_SVC_USER_MI_CLIENT_ID=${petClinicDiscoSvcUserManagedIdentityClientId}" >> $GITHUB_OUTPUT

          echo "PET_CLINIC_VETS_SVC_USER_MI_NAME: ${petClinicVetsSvcUserManagedIdentityName}"
          echo "PET_CLINIC_VETS_SVC_USER_MI_NAME=${petClinicVetsSvcUserManagedIdentityName}" >> $GITHUB_OUTPUT
          echo "PET_CLINIC_VETS_SVC_USER_MI_PRINCIPAL_ID: ${petClinicVetsSvcUserManagedIdentityPrincipalId}"
          echo "PET_CLINIC_VETS_SVC_USER_MI_PRINCIPAL_ID=${petClinicVetsSvcUserManagedIdentityPrincipalId}" >> $GITHUB_OUTPUT
          echo "PET_CLINIC_VETS_SVC_USER_MI_CLIENT_ID: ${petClinicVetsSvcUserManagedIdentityClientId}"
          echo "PET_CLINIC_VETS_SVC_USER_MI_CLIENT_ID=${petClinicVetsSvcUserManagedIdentityClientId}" >> $GITHUB_OUTPUT
          echo "PET_CLINIC_VETS_SVC_DB_NAME: ${petClinicVetsSvcDbName}"
          echo "PET_CLINIC_VETS_SVC_DB_NAME=${petClinicVetsSvcDbName}" >> $GITHUB_OUTPUT
          echo "PET_CLINIC_VETS_SVC_DB_USER_NAME: ${petClinicVetsSvcDbUserName}"
          echo "PET_CLINIC_VETS_SVC_DB_USER_NAME=${petClinicVetsSvcDbUserName}" >> $GITHUB_OUTPUT

          echo "PET_CLINIC_VISITS_SVC_USER_MI_NAME: ${petClinicVisitsSvcUserManagedIdentityName}"
          echo "PET_CLINIC_VISITS_SVC_USER_MI_NAME=${petClinicVisitsSvcUserManagedIdentityName}" >> $GITHUB_OUTPUT
          echo "PET_CLINIC_VISITS_SVC_USER_MI_PRINCIPAL_ID: ${petClinicVisitsSvcUserManagedIdentityPrincipalId}"
          echo "PET_CLINIC_VISITS_SVC_USER_MI_PRINCIPAL_ID=${petClinicVisitsSvcUserManagedIdentityPrincipalId}" >> $GITHUB_OUTPUT
          echo "PET_CLINIC_VISITS_SVC_USER_MI_CLIENT_ID: ${petClinicVisitsSvcUserManagedIdentityClientId}"
          echo "PET_CLINIC_VISITS_SVC_USER_MI_CLIENT_ID=${petClinicVisitsSvcUserManagedIdentityClientId}" >> $GITHUB_OUTPUT
          echo "PET_CLINIC_VISITS_SVC_DB_NAME: ${petClinicVisitsSvcDbName}"
          echo "PET_CLINIC_VISITS_SVC_DB_NAME=${petClinicVisitsSvcDbName}" >> $GITHUB_OUTPUT
          echo "PET_CLINIC_VISITS_SVC_DB_USER_NAME: ${petClinicVisitsSvcDbUserName}"
          echo "PET_CLINIC_VISITS_SVC_DB_USER_NAME=${petClinicVisitsSvcDbUserName}" >> $GITHUB_OUTPUT

          echo "PGSQL_UPDATED_FIREWALL_RULES: ${pgsqlUpdatedFirewallRules}"
          echo "$pgsqlUpdatedFirewallRules" > ./PGSQL_UPDATED_FIREWALL_RULES.txt
      
      # Avoid token validity issues (previous step sometimes takes too long)
      - name: Azure re-login in PGSQL Subscription # https://learn.microsoft.com/en-us/azure/developer/github/connect-from-azure
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AAD_CLIENT_ID }}
          tenant-id: ${{ secrets.AAD_TENANT_ID }}
          subscription-id: ${{ secrets.PGSQL_SUBSCRIPTION_ID }}
      
      - name: Remove obsolete PGSQL firewall rules
        run: |
          jsonUpdatedFirewallRuleNamesArray=`cat ./scripts/deployment/templates/bicep/PGSQL_UPDATED_FIREWALL_RULES.txt`
          echo "jsonUpdatedFirewallRuleNamesArray: $jsonUpdatedFirewallRuleNamesArray"

          shellUpdatedFirewallRuleNamesArray=`echo "$jsonUpdatedFirewallRuleNamesArray"| jq -r '.[]'`
          echo "shellUpdatedFirewallRuleNamesArray: $shellUpdatedFirewallRuleNamesArray"

          shellAllFirewallRuleNamesArray=`az postgres flexible-server firewall-rule list -n ${{secrets.PGSQL_NAME}} -g ${{secrets.PGSQL_RESOURCE_GROUP}} --query "[].name" -o tsv`
          echo "shellAllFirewallRuleNamesArray: $shellAllFirewallRuleNamesArray"

          for firewallRuleName in $shellAllFirewallRuleNamesArray;
          do
            echo "Testing Firewall rule: $firewallRuleName"
            delete="false"
            if [[ $shellUpdatedFirewallRuleNamesArray =~ $firewallRuleName ]]; then
              echo "Firewall rule: $firewallRuleName is still valid"
            else
              echo "Firewall rule: $firewallRuleName is obsolete"
              az postgres flexible-server firewall-rule delete --rule-name $firewallRuleName -g ${{secrets.PGSQL_RESOURCE_GROUP}} --name ${{secrets.PGSQL_NAME}} --subscription "${{secrets.PGSQL_SUBSCRIPTION_ID}}" --yes
              echo "Firewall rule: $firewallRuleName has been deleted"
            fi
          done

      # Avoid token validity issues (previous step sometimes takes too long)
      - name: Azure re-login in PGSLQ Subscription # https://learn.microsoft.com/en-us/azure/developer/github/connect-from-azure
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AAD_CLIENT_ID }}
          tenant-id: ${{ secrets.AAD_TENANT_ID }}
          subscription-id: ${{ secrets.PGSQL_SUBSCRIPTION_ID }}
      
      - name: Create TODO_APP_DB Database
        working-directory: ./scripts/deployment/utils/
        run: |
          # When the database gets created using a script, AAD accounts gets full permissions on public schema and can assign roles
          export PGPASSWORD=`az account get-access-token --resource-type oss-rdbms --query "[accessToken]" --output tsv`
          ./create_aad_db.sh -s "${{secrets.PGSQL_NAME}}" -d "${{steps.deployment.outputs.TODO_APP_DB_NAME}}" -a "${{secrets.DBA_GROUP_NAME}}"
      
      - name: Create PET_CLINIC_CUSTS_SVC_DB Database
        working-directory: ./scripts/deployment/utils/
        run: |
          export PGPASSWORD=`az account get-access-token --resource-type oss-rdbms --query "[accessToken]" --output tsv`
          ./create_aad_db.sh -s "${{secrets.PGSQL_NAME}}" -d "${{steps.deployment.outputs.PET_CLINIC_CUSTS_SVC_DB_NAME}}" -a "${{secrets.DBA_GROUP_NAME}}"

      - name: Create PET_CLINIC_VETS_SVC_DB Database
        working-directory: ./scripts/deployment/utils/
        run: |
          export PGPASSWORD=`az account get-access-token --resource-type oss-rdbms --query "[accessToken]" --output tsv`
          ./create_aad_db.sh -s "${{secrets.PGSQL_NAME}}" -d "${{steps.deployment.outputs.PET_CLINIC_VETS_SVC_DB_NAME}}" -a "${{secrets.DBA_GROUP_NAME}}"

      - name: Create PET_CLINIC_VISITS_SVC_DB Database
        working-directory: ./scripts/deployment/utils/
        run: |
          export PGPASSWORD=`az account get-access-token --resource-type oss-rdbms --query "[accessToken]" --output tsv`
          ./create_aad_db.sh -s "${{secrets.PGSQL_NAME}}" -d "${{steps.deployment.outputs.PET_CLINIC_VISITS_SVC_DB_NAME}}" -a "${{secrets.DBA_GROUP_NAME}}"

      - name: Create TODO_APP_DB user(s)
        working-directory: ./scripts/deployment/utils/
        run: |
          export PGPASSWORD=`az account get-access-token --resource-type oss-rdbms --query "[accessToken]" --output tsv`
          ./create_aad_pgsql_user.sh \
            -s "${{secrets.PGSQL_NAME}}" \
            -d "${{steps.deployment.outputs.TODO_APP_DB_NAME}}" \
            -a "${{secrets.DBA_GROUP_NAME}}" \
            -n "${{steps.deployment.outputs.TODO_APP_DB_USER_NAME}}" \
            -o "${{steps.deployment.outputs.TODO_APP_USER_MI_PRINCIPAL_ID}}"

      - name: Create PET_CLINIC_CUSTS_SVC_DB user(s)
        working-directory: ./scripts/deployment/utils/
        run: |
            export PGPASSWORD=`az account get-access-token --resource-type oss-rdbms --query "[accessToken]" --output tsv`
            ./create_aad_pgsql_user.sh \
              -s "${{secrets.PGSQL_NAME}}" \
              -d "${{steps.deployment.outputs.PET_CLINIC_CUSTS_SVC_DB_NAME}}" \
              -a "${{secrets.DBA_GROUP_NAME}}" \
              -n "${{steps.deployment.outputs.PET_CLINIC_CUSTS_SVC_DB_USER_NAME}}" \
              -o "${{steps.deployment.outputs.PET_CLINIC_CUSTS_SVC_USER_MI_PRINCIPAL_ID}}"
    
      - name: Create PET_CLINIC_VETS_SVC_DB user(s)
        working-directory: ./scripts/deployment/utils/
        run: |
            export PGPASSWORD=`az account get-access-token --resource-type oss-rdbms --query "[accessToken]" --output tsv`
            ./create_aad_pgsql_user.sh \
              -s "${{secrets.PGSQL_NAME}}" \
              -d "${{steps.deployment.outputs.PET_CLINIC_VETS_SVC_DB_NAME}}" \
              -a "${{secrets.DBA_GROUP_NAME}}" \
              -n "${{steps.deployment.outputs.PET_CLINIC_VETS_SVC_DB_USER_NAME}}" \
              -o "${{steps.deployment.outputs.PET_CLINIC_VETS_SVC_USER_MI_PRINCIPAL_ID}}"
          
      - name: Create PET_CLINIC_VISITS_SVC_DB user(s)
        working-directory: ./scripts/deployment/utils/
        run: |
            export PGPASSWORD=`az account get-access-token --resource-type oss-rdbms --query "[accessToken]" --output tsv`
            ./create_aad_pgsql_user.sh \
              -s "${{secrets.PGSQL_NAME}}" \
              -d "${{steps.deployment.outputs.PET_CLINIC_VISITS_SVC_DB_NAME}}" \
              -a "${{secrets.DBA_GROUP_NAME}}" \
              -n "${{steps.deployment.outputs.PET_CLINIC_VISITS_SVC_DB_USER_NAME}}" \
              -o "${{steps.deployment.outputs.PET_CLINIC_VISITS_SVC_USER_MI_PRINCIPAL_ID}}"

      - name: Remove DB Firewall exception used for DB setup
        run: |
            az postgres flexible-server firewall-rule delete --rule-name "AllowDeploymentClientIP" -g ${{secrets.PGSQL_RESOURCE_GROUP}} --name ${{secrets.PGSQL_NAME}} --subscription "${{secrets.PGSQL_SUBSCRIPTION_ID}}" --yes

      # Switch the subscription back to AKS subscription
      - name: Azure re-login in AKS Subscription
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AAD_CLIENT_ID }}
          tenant-id: ${{ secrets.AAD_TENANT_ID }}
          subscription-id: ${{ secrets.AKS_SUBSCRIPTION_ID }}

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'
        
      - name: Setup kubelogin
        uses: azure/use-kubelogin@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          kubelogin-version: 'latest'
          
      - name: Set AKS context
        id: set-context
        uses: azure/aks-set-context@v3
        with:
          resource-group: '${{secrets.AKS_RESOURCE_GROUP}}'
          cluster-name: '${{secrets.AKS_NAME}}'
          admin: 'false'
          use-kubelogin: 'true'

      - name: Deploy Namespaces
        uses: Azure/k8s-deploy@v4
        with:
          namespace: 'default'
          manifests: scripts/deployment/templates/k8s/01-namespaces.yml
          pull-images: false           

      - name: Prepare manifests
        working-directory: ./scripts/deployment/templates/k8s/
        env:
          TODO_APP_VIEW_AD_GROUP_ID: ${{steps.deployment.outputs.TODO_APP_VIEW_AD_GROUP_ID}}
          TODO_APP_EDIT_AD_GROUP_ID: ${{steps.deployment.outputs.TODO_APP_EDIT_AD_GROUP_ID}}
          PET_CLINIC_VIEW_AD_GROUP_ID: ${{steps.deployment.outputs.PET_CLINIC_VIEW_AD_GROUP_ID}}
          PET_CLINIC_APP_EDIT_AD_GROUP_ID: ${{steps.deployment.outputs.PET_CLINIC_APP_EDIT_AD_GROUP_ID}}
          IAAS_PGSQL_VIEW_AD_GROUP_ID: ${{steps.deployment.outputs.IAAS_PGSQL_VIEW_AD_GROUP_ID}}
          IAAS_PGSQL_APP_EDIT_AD_GROUP_ID: ${{steps.deployment.outputs.IAAS_PGSQL_APP_EDIT_AD_GROUP_ID}}
          IAAS_RABBIT_MQ_VIEW_AD_GROUP_ID: ${{steps.deployment.outputs.IAAS_RABBIT_MQ_VIEW_AD_GROUP_ID}}
          IAAS_RABBIT_MQ_APP_EDIT_AD_GROUP_ID: ${{steps.deployment.outputs.IAAS_RABBIT_MQ_APP_EDIT_AD_GROUP_ID}}
          TODO_APP_CLIENT_ID: ${{steps.deployment.outputs.TODO_APP_USER_MI_CLIENT_ID}}
        run: |
            cat ./02a-rolebinding-todo-api.yml | TODO_APP_EDIT_AD_GROUP_ID=${env.TODO_APP_EDIT_AD_GROUP_ID} TODO_APP_VIEW_AD_GROUP_ID=${env.TODO_APP_VIEW_AD_GROUP_ID} envsubst > ./02a-rolebinding-todo-api.yml.tmp
            cat ./02b-rolebinding-petclinic-api.yml | PET_CLINIC_APP_EDIT_AD_GROUP_ID=${env.PET_CLINIC_APP_EDIT_AD_GROUP_ID} PET_CLINIC_VIEW_AD_GROUP_ID=${env.PET_CLINIC_VIEW_AD_GROUP_ID} envsubst > ./02b-rolebinding-petclinic-api.yml.tmp
            cat ./02c-rolebinding-iaas-pgsql-api.yml | IAAS_PGSQL_APP_EDIT_AD_GROUP_ID=${env.IAAS_PGSQL_APP_EDIT_AD_GROUP_ID} IAAS_PGSQL_VIEW_AD_GROUP_ID=${env.IAAS_PGSQL_VIEW_AD_GROUP_ID} envsubst > ./02c-rolebinding-iaas-pgsql-api.yml.tmp
            cat ./02d-rolebinding-iaas-rabbitmq-api.yml | IAAS_RABBIT_MQ_APP_EDIT_AD_GROUP_ID=${env.IAAS_RABBIT_MQ_APP_EDIT_AD_GROUP_ID} IAAS_RABBIT_MQ_VIEW_AD_GROUP_ID=${env.IAAS_RABBIT_MQ_VIEW_AD_GROUP_ID} envsubst > ./02d-rolebinding-iaas-rabbitmq-api.yml.tmp
            cat ./06a-workload-identity-todo-app.yml | TODO_APP_CLIENT_ID=${env.TODO_APP_USER_MI_CLIENT_ID} envsubst > ./06a-workload-identity-todo-app.yml.tmp

      - name: Deploy TODO_APP rolebinding to AKS
        uses: Azure/k8s-deploy@v4
        with:
          namespace: 'default'
          manifests: |
             ./scripts/deployment/templates/k8s/02a-rolebinding-todo.yml.tmp
          pull-images: false           

      - name: Deploy K8S role bindings for PET_CLINIC
        working-directory: ./scripts/deployment/templates/k8s/
        env:
          PET_CLINIC_VIEW_AD_GROUP_ID: ${{steps.deployment.outputs.PET_CLINIC_VIEW_AD_GROUP_ID}}
          PET_CLINIC_APP_EDIT_AD_GROUP_ID: ${{steps.deployment.outputs.PET_CLINIC_APP_EDIT_AD_GROUP_ID}}
        run: |
            kubectl apply -f ./02b-rolebinding-petclinic-api.yml.tmp