name: 99-Continuous-Delivery

on:
  workflow_dispatch:
    inputs:
      app_name:
        description: 'Application to deploy'
        required: true
        type: choice
        options:
          - 'todo-app'
          - 'spring-petclinic-admin-server'
          - 'spring-petclinic-api-gateway'
          - 'spring-petclinic-config-server'
          - 'spring-petclinic-customers-service'
          - 'spring-petclinic-discovery-server'
          - 'spring-petclinic-vets-service'
          - 'spring-petclinic-visits-service'
        default: 'todo-app'
      version:
        description: 'App Version to deploy (i.e. 1.5.3)'
        required: true
      deployment_suffix:
        description: 'K8S Deployment Suffix'

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
        id-token: write
        contents: read
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Init
        id: init
        run: |
          releaseVersion=""
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            releaseVersion="${{ github.event.inputs.version }}"
            deploymentSuffix="${{ github.event.inputs.deployment_suffix }}"
          fi
          if [[ -z "$releaseVersion" ]]; then
            echo "RELEASE_VERSION is not set. Exiting..."
            exit 1
          fi
          dbName=""
          if [[ "${{ github.event.inputs.app_name }}" == "todo-app" ]]; then
            dbName="tododb"
          elif [[ "${{ github.event.inputs.app_name }}" == "spring-petclinic-customers-service" ]]; then
            dbName="petcliniccustomersdb"
          elif [[ "${{ github.event.inputs.app_name }}" == "spring-petclinic-vets-service" ]]; then
            dbName="petclinicvetssdb"
          elif [[ "${{ github.event.inputs.app_name }}" == "spring-petclinic-visits-service" ]]; then
            dbName="petclinicvisitsdb"
          fi
          echo "APP_NAME=${{github.event.inputs.app_name}}" >> $GITHUB_OUTPUT
          echo "RELEASE_VERSION=${releaseVersion}" >> $GITHUB_OUTPUT
          echo "RELEASE_DIR_NAME=${{github.event.inputs.app_name}}-${releaseVersion}" >> $GITHUB_OUTPUT
          echo "RELEASE_ARCHIVE_NAME=${{github.event.inputs.app_name}}-${releaseVersion}.zip" >> $GITHUB_OUTPUT
          echo "RELEASE_FILE_NAME=${{github.event.inputs.app_name}}-${releaseVersion}.jar" >> $GITHUB_OUTPUT
          echo "DEPLOYMENT_SUFFIX=$deploymentSuffix" >> $GITHUB_OUTPUT
          echo "DB_NAME=$dbName" >> $GITHUB_OUTPUT
      
      - uses: robinraju/release-downloader@v1.7
        with:
          tag: 'v${{steps.init.outputs.RELEASE_VERSION}}-${{steps.init.outputs.APP_NAME}}'
          fileName: "${{steps.init.outputs.RELEASE_ARCHIVE_NAME}}"

      - name: Check downloaded files
        run: |
          pwd
          ls -la
          if [[ ! -f "${{steps.init.outputs.RELEASE_ARCHIVE_NAME}}" ]]; then
            echo "'${{steps.init.outputs.RELEASE_ARCHIVE_NAME}}' does not exist."
            exit 1
          fi
      
      - name: Unzip archive
        run: |
          echo "Unzipping the release archive file: ${{steps.init.outputs.RELEASE_ARCHIVE_NAME}}"
          unzip ${{steps.init.outputs.RELEASE_ARCHIVE_NAME}}
          if [[ ! -f "${{steps.init.outputs.RELEASE_DIR_NAME}}/${{steps.init.outputs.RELEASE_FILE_NAME}}" ]]; then
            echo "'${{steps.init.outputs.RELEASE_DIR_NAME}}/${{steps.init.outputs.RELEASE_FILE_NAME}}' does not exist."
            exit 1
          fi

      - name: Azure login in AKS Subscription # https://learn.microsoft.com/en-us/azure/developer/github/connect-from-azure
        uses: azure/login@v1
        with:
          client-id: "${{secrets.AAD_CLIENT_ID}}"
          tenant-id: "${{secrets.AAD_TENANT_ID}}"
          subscription-id: "${{secrets.PGSQL_SUBSCRIPTION_ID}}"

      - name: Add DB Firewall exception used for Schema sync
        if: ${{steps.init.outputs.DB_NAME}} != ''
        run: |
          deploymentClientIP=`dig +short myip.opendns.com @resolver1.opendns.com.`
          az postgres flexible-server firewall-rule create --rule-name "AllowDeploymentClientIP" --resource-group ${{secrets.PGSQL_RESOURCE_GROUP}} --name ${{secrets.PGSQL_NAME}} --start-ip-address ${deploymentClientIP} --subscription "${{secrets.PGSQL_SUBSCRIPTION_ID}}"
      
      - name: Synchronize DB Schema
        if: ${{steps.init.outputs.DB_NAME}} != ''
        env:
          RELEASE_DIR_NAME: ${{steps.init.outputs.RELEASE_DIR_NAME}}
          PGSQL_SERVER_NAME: '${{secrets.PGSQL_NAME}}.postgres.database.azure.com'
          DB_NAME: ${{steps.init.outputs.DB_NAME}}
        run: |
          export PGPASSWORD=`az account get-access-token --resource-type oss-rdbms --query "[accessToken]" --output tsv`
          psql --set=sslmode=require -h "${{env.PGSQL_SERVER_NAME}}" -p 5432 -d "${{env.DB_NAME}}" -U "${{secrets.DBA_GROUP_NAME}}" --file=./${{env.RELEASE_DIR_NAME}}/db/pgsql/schema.sql -v ON_ERROR_STOP=1
          psql --set=sslmode=require -h "${{env.PGSQL_SERVER_NAME}}" -p 5432 -d "${{env.DB_NAME}}" -U "${{secrets.DBA_GROUP_NAME}}" --file=./${{env.RELEASE_DIR_NAME}}/db/pgsql/data.sql -v ON_ERROR_STOP=1
      
      - name: Azure login in AKS Subscription # https://learn.microsoft.com/en-us/azure/developer/github/connect-from-azure
        uses: azure/login@v1
        with:
          client-id: "${{secrets.AAD_CLIENT_ID}}"
          tenant-id: "${{secrets.AAD_TENANT_ID}}"
          subscription-id: "${{secrets.AKS_SUBSCRIPTION_ID}}"

      - name: Check if the container image exists
        id: container_image_validation
        env:
          APP_NAME: ${{steps.init.outputs.APP_NAME}}
          IMAGE_NAME: '${{steps.init.outputs.APP_NAME}}:${{steps.init.outputs.RELEASE_VERSION}}'
          CONTAINER_REGISTRY_NAME: ${{secrets.CONTAINER_REGISTRY_NAME}}
          RELEASE_VERSION: ${{steps.init.outputs.RELEASE_VERSION}}
        run: |
          repoName=`az acr repository list -n martinabrle --query "[?contains(@, '${{env.APP_NAME}}')]" -o tsv`
          echo "Repo name: $repoName"
          if [[ -z "${repoName}" ]]; then
            echo "Repo '${{env.APP_NAME}}' does not exist."
            echo "CONTAINER_IMAGE_EXISTS=false" >> $GITHUB_OUTPUT
          else
            echo "Repo '${{env.APP_NAME}}' already exist."
            tagName=`az acr repository show-tags -n ${{env.CONTAINER_REGISTRY_NAME}} --repository ${{env.APP_NAME}} --query "[?contains(@, '${{env.RELEASE_VERSION}}')]" -o tsv`
            if [[ -z "${tagName}" ]]; then
              echo "Tag '${{env.RELEASE_VERSION}}' does not exist."
              echo "CONTAINER_IMAGE_EXISTS=false" >> $GITHUB_OUTPUT
            else
              echo "Tag '${{env.RELEASE_VERSION}}' already exist."
              echo "CONTAINER_IMAGE_EXISTS=true" >> $GITHUB_OUTPUT
            fi
          fi
      
      - name: Build and push container image if needed
        if: ${{steps.container_image_validation.outputs.CONTAINER_IMAGE_EXISTS}} == 'false'
        env:
          IMAGE_NAME: '${{steps.init.outputs.APP_NAME}}:${{steps.init.outputs.RELEASE_VERSION}}'
          CONTAINER_REGISTRY_NAME: ${{secrets.CONTAINER_REGISTRY_NAME}}
          RELEASE_DIR_NAME: '${{env.RELEASE_DIR_NAME}}'
        run: |
          cd ./${{env.RELEASE_DIR_NAME}}
          az acr build --registry ${{env.CONTAINER_REGISTRY_NAME}} --image ${{env.IMAGE_NAME}} --file ./Dockerfile . --subscription ${{secrets.CONTAINER_REGISTRY_SUBSCRIPTION_ID}}
          cd ..
      
      - name: Prepare deployment manifest
        env:
          DEPLOYMENT_SUFFIX: ${{steps.init.outputs.DEPLOYMENT_SUFFIX}}
          RELEASE_DIR_NAME: ${{steps.init.outputs.RELEASE_DIR_NAME}}
          CONTAINER_IMAGE: ${{secrets.CONTAINER_REGISTRY_NAME}}.azurecr.io/${{steps.init.outputs.APP_NAME}}:${{steps.init.outputs.RELEASE_VERSION}}
        run: |
          cat ./${{env.RELEASE_DIR_NAME}}/k8s/deployment.yml | CONTAINER_IMAGE=${{env.CONTAINER_IMAGE}} DEPLOYMENT_SUFFIX=${{env.DEPLOYMENT_SUFFIX}} envsubst > ./deployment.yml.tmp
          cat ./deployment.yml.tmp

      - name: Test connection to AKS
        run: |
          az aks command invoke \
           --resource-group ${{secrets.AKS_RESOURCE_GROUP}} \
           --name ${{secrets.AKS_NAME}} \
           --command "kubectl get ns"

      - name: Deploy app into AKS
        run: |
          az aks command invoke \
           --resource-group ${{secrets.AKS_RESOURCE_GROUP}} \
           --name ${{secrets.AKS_NAME}} \
           --command "kubectl apply -f deployment.yml.tmp" \
           --file deployment.yml.tmp
      
      - name: Remove DB Firewall exception used for Schema sync
        if: ${{steps.init.outputs.DB_NAME}} != ''
        run: |
          az postgres flexible-server firewall-rule delete --rule-name "AllowDeploymentClientIP" -g ${{secrets.PGSQL_RESOURCE_GROUP}} --name ${{secrets.PGSQL_NAME}} --subscription "${{secrets.PGSQL_SUBSCRIPTION_ID}}" --yes
      