name: 70-Continuous-Integration

on:
  push:
   branches:
     - main
   paths:
     - 'todo-app/**'
     - 'spring-petclinic-admin-server/**'
     - 'spring-petclinic-api-gateway/**'
     - 'spring-petclinic-config-server/**'
     - 'spring-petclinic-customers-service/**'
     - 'spring-petclinic-discovery-server/**'
     - 'spring-petclinic-vets-service/**'
     - 'spring-petclinic-visits-service/**'
     - 'docker/grafana/**'
     - 'docker/prometheus/**'

  workflow_dispatch:
    inputs:
      force_release:
        description: 'Force a new release for all services, even if there are no changes'
        required: false
        type: boolean
        default: false

jobs:
  versions:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      matrix: ${{ steps.versions.outputs.matrix }}
      something_to_deploy: ${{ steps.versions.outputs.something_to_deploy }}
      matrix_utils: ${{ steps.versions.outputs.matrix_utils }}
      something_to_deploy_utils: ${{ steps.versions.outputs.something_to_deploy_utils }}
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    # Not very nice to have to repeat this for each service, but
    # in case of no change in a service, only this job will run,
    # in case of a change in one servive, this job (+ one release job)
    # will run etc (n+1 jobs for n services changed)
    # And on top of that, this can be used as a demo for a dynamically
    # generated matrix.
    # However, the best solution would be to split this monorepo into
    # multiple repos, one for each service, and let each of these re-
    # pos to take care of their own release and deployment needs. 
    - name: Semver for TODO-APP
      uses: PaulHatch/semantic-version@v5.3.0
      id: semver_todo_app_version
      with:
        tag_prefix: "v"
        major_pattern: "(MAJOR)"
        major_regexp_flags: ""
        minor_pattern: "(MINOR)"
        minor_regexp_flags: ""
        version_format: "${major}.${minor}.${patch}"
        change_path: "todo-app"
        namespace: todo-app
        bump_each_commit: true
        search_commit_body: true
        user_format_type: "csv"
    
    - name: Semver for ADMIN-SERVER
      uses: PaulHatch/semantic-version@v5.3.0
      id: semver_petclinic_admin_svc_version
      with:
        tag_prefix: "v"
        major_pattern: "(MAJOR)"
        major_regexp_flags: ""
        minor_pattern: "(MINOR)"
        minor_regexp_flags: ""
        version_format: "${major}.${minor}.${patch}"
        change_path: spring-petclinic-admin-server
        namespace: spring-petclinic-admin-server
        bump_each_commit: true
        search_commit_body: true
        user_format_type: "csv"

    - name: Semver for API-GATEWAY
      uses: PaulHatch/semantic-version@v5.3.0
      id: semver_petclinic_api_gw_svc_version
      with:
        tag_prefix: "v"
        major_pattern: "(MAJOR)"
        major_regexp_flags: ""
        minor_pattern: "(MINOR)"
        minor_regexp_flags: ""
        version_format: "${major}.${minor}.${patch}"
        change_path: spring-petclinic-api-gateway
        namespace: spring-petclinic-api-gateway
        bump_each_commit: true
        search_commit_body: true
        user_format_type: "csv"
        
    - name: Semver for CONFIG-SERVER
      uses: PaulHatch/semantic-version@v5.3.0
      id: semver_petclinic_config_svc_version
      with:
        tag_prefix: "v"
        major_pattern: "(MAJOR)"
        major_regexp_flags: ""
        minor_pattern: "(MINOR)"
        minor_regexp_flags: ""
        version_format: "${major}.${minor}.${patch}"
        change_path: spring-petclinic-config-server
        namespace: spring-petclinic-config-server
        bump_each_commit: true
        search_commit_body: true
        user_format_type: "csv"

    - name: Semver for CUSTOMERS-SERVICE
      uses: PaulHatch/semantic-version@v5.3.0
      id: semver_petclinic_customers_svc_version
      with:
        tag_prefix: "v"
        major_pattern: "(MAJOR)"
        major_regexp_flags: ""
        minor_pattern: "(MINOR)"
        minor_regexp_flags: ""
        version_format: "${major}.${minor}.${patch}"
        change_path: spring-petclinic-customers-service
        namespace: spring-petclinic-customers-service
        bump_each_commit: true
        search_commit_body: true
        user_format_type: "csv"
            
    - name: Semver for DICSOVERY-SERVER
      uses: PaulHatch/semantic-version@v5.3.0
      id: semver_petclinic_discovery_svc_version
      with:
        tag_prefix: "v"
        major_pattern: "(MAJOR)"
        major_regexp_flags: ""
        minor_pattern: "(MINOR)"
        minor_regexp_flags: ""
        version_format: "${major}.${minor}.${patch}"
        change_path: spring-petclinic-discovery-server
        namespace: spring-petclinic-discovery-server
        bump_each_commit: true
        search_commit_body: true
        user_format_type: "csv"

    - name: Semver for VETS-SERVICE
      uses: PaulHatch/semantic-version@v5.3.0
      id: semver_petclinic_vets_svc_version
      with:
        tag_prefix: "v"
        major_pattern: "(MAJOR)"
        major_regexp_flags: ""
        minor_pattern: "(MINOR)"
        minor_regexp_flags: ""
        version_format: "${major}.${minor}.${patch}"
        change_path: spring-petclinic-vets-service
        namespace: spring-petclinic-vets-service
        bump_each_commit: true
        search_commit_body: true
        user_format_type: "csv"

    - name: Semver for VISITS-SERVICE
      uses: PaulHatch/semantic-version@v5.3.0
      id: semver_petclinic_visits_svc_version
      with:
        tag_prefix: "v"
        major_pattern: "(MAJOR)"
        major_regexp_flags: ""
        minor_pattern: "(MINOR)"
        minor_regexp_flags: ""
        version_format: "${major}.${minor}.${patch}"
        change_path: spring-petclinic-visits-service
        namespace: spring-petclinic-visits-service
        bump_each_commit: true
        search_commit_body: true
        user_format_type: "csv"
 
    - name: Semver for GRAFANA
      uses: PaulHatch/semantic-version@v5.3.0
      id: semver_grafana_version
      with:
        tag_prefix: "v"
        major_pattern: "(MAJOR)"
        major_regexp_flags: ""
        minor_pattern: "(MINOR)"
        minor_regexp_flags: ""
        version_format: "${major}.${minor}.${patch}"
        change_path: docker/grafana
        namespace: grafana
        bump_each_commit: true
        search_commit_body: true
        user_format_type: "csv"
  
    - name: Semver for PROMETHEUS
      uses: PaulHatch/semantic-version@v5.3.0
      id: semver_prometheus_version
      with:
        tag_prefix: "v"
        major_pattern: "(MAJOR)"
        major_regexp_flags: ""
        minor_pattern: "(MINOR)"
        minor_regexp_flags: ""
        version_format: "${major}.${minor}.${patch}"
        change_path: docker/prometheus
        namespace: prometheus
        bump_each_commit: true
        search_commit_body: true
        user_format_type: "csv"

    - name: Semver for PROMETHEUS
      uses: PaulHatch/semantic-version@v5.3.0
      id: semver_zipkin_version
      with:
        tag_prefix: "v"
        major_pattern: "(MAJOR)"
        major_regexp_flags: ""
        minor_pattern: "(MINOR)"
        minor_regexp_flags: ""
        version_format: "${major}.${minor}.${patch}"
        change_path: docker/zipkin
        namespace: zipkin
        bump_each_commit: true
        search_commit_body: true
        user_format_type: "csv"

    - name: Set versions
      id: versions
      run: |
          forceRelease=false
          if [[ "${{github.event_name}}" == "workflow_dispatch" ]]; then
            if [[ "${{github.event.inputs.force_release}}" == "true" ]]; then
              forceRelease=true
            fi
          fi
          delimiter=""
          delimiter_utils=""
          matrix="{\"include\":["
          matrix_utils="{\"include\":["
          if [[ "${{steps.semver_todo_app_version.outputs.changed}}" == "true" && "${{steps.semver_todo_app_version.outputs.is_tagged}}" == "false" || "$forceRelease" == "true" ]]; then
            matrix="$matrix${delimiter}{\"artifact_name\":\"todo-app\",\"version\":\"${{steps.semver_todo_app_version.outputs.version}}\",\"version_tag\":\"${{steps.semver_todo_app_version.outputs.version_tag}}\",\"java_version\":\"11\",\"db_name\":\"tododb\"}"
            delimiter=","
          fi
          if [[ "${{steps.semver_petclinic_admin_svc_version.outputs.changed}}" == "true" && "${{steps.semver_petclinic_admin_svc_version.outputs.is_tagged}}" == "false" || "$forceRelease" == "true" ]]; then
            matrix="$matrix${delimiter}{\"artifact_name\":\"spring-petclinic-admin-server\",\"version\":\"${{steps.semver_petclinic_admin_svc_version.outputs.version}}\",\"version_tag\":\"${{steps.semver_petclinic_admin_svc_version.outputs.version_tag}}\",\"java_version\":\"17\",\"db_name\":\"\"}"
            delimiter=","
          fi
          if [[ "${{steps.semver_petclinic_api_gw_svc_version.outputs.changed}}" == "true" && "${{steps.semver_petclinic_api_gw_svc_version.outputs.is_tagged}}" == "false" || "$forceRelease" == "true" ]]; then
            matrix="$matrix${delimiter}{\"artifact_name\":\"spring-petclinic-api-gateway\",\"version\":\"${{steps.semver_petclinic_api_gw_svc_version.outputs.version}}\",\"version_tag\":\"${{steps.semver_petclinic_api_gw_svc_version.outputs.version_tag}}\",\"java_version\":\"17\",\"db_name\":\"\"}"
            delimiter=","
          fi
          if [[ "${{steps.semver_petclinic_config_svc_version.outputs.changed}}" == "true" && "${{steps.semver_petclinic_config_svc_version.outputs.is_tagged}}" == "false" || "$forceRelease" == "true" ]]; then
            matrix="$matrix${delimiter}{\"artifact_name\":\"spring-petclinic-config-server\",\"version\":\"${{steps.semver_petclinic_config_svc_version.outputs.version}}\",\"version_tag\":\"${{steps.semver_petclinic_config_svc_version.outputs.version_tag}}\",\"java_version\":\"17\",\"db_name\":\"\"}"
            delimiter=","
          fi
          if [[ "${{steps.semver_petclinic_customers_svc_version.outputs.changed}}" == "true" && "${{steps.semver_petclinic_customers_svc_version.outputs.is_tagged}}" == "false" || "$forceRelease" == "true" ]]; then
            matrix="$matrix${delimiter}{\"artifact_name\":\"spring-petclinic-customers-service\",\"version\":\"${{steps.semver_petclinic_customers_svc_version.outputs.version}}\",\"version_tag\":\"${{steps.semver_petclinic_customers_svc_version.outputs.version_tag}}\",\"java_version\":\"17\",\"db_name\":\"petclinicdb\"}"
            delimiter=","
          fi
          if [[ "${{steps.semver_petclinic_discovery_svc_version.outputs.changed}}" == "true" && "${{steps.semver_petclinic_discovery_svc_version.outputs.is_tagged}}" == "false" || "$forceRelease" == "true" ]]; then
            matrix="$matrix${delimiter}{\"artifact_name\":\"spring-petclinic-discovery-server\",\"version\":\"${{steps.semver_petclinic_discovery_svc_version.outputs.version}}\",\"version_tag\":\"${{steps.semver_petclinic_discovery_svc_version.outputs.version_tag}}\",\"java_version\":\"17\",\"db_name\":\"\"}"
            delimiter=","
          fi
          if [[ "${{steps.semver_petclinic_vets_svc_version.outputs.changed}}" == "true" && "${{steps.semver_petclinic_vets_svc_version.outputs.is_tagged}}" == "false" || "$forceRelease" == "true" ]]; then
            matrix="$matrix${delimiter}{\"artifact_name\":\"spring-petclinic-vets-service\",\"version\":\"${{steps.semver_petclinic_vets_svc_version.outputs.version}}\",\"version_tag\":\"${{steps.semver_petclinic_vets_svc_version.outputs.version_tag}}\",\"java_version\":\"17\",\"db_name\":\"petclinicdb\"}"
            delimiter=","
          fi
          if [[ "${{steps.semver_petclinic_visits_svc_version.outputs.changed}}" == "true" && "${{steps.semver_petclinic_visits_svc_version.outputs.is_tagged}}" == "false" || "$forceRelease" == "true" ]]; then
            matrix="$matrix${delimiter}{\"artifact_name\":\"spring-petclinic-visits-service\",\"version\":\"${{steps.semver_petclinic_visits_svc_version.outputs.version}}\",\"version_tag\":\"${{steps.semver_petclinic_visits_svc_version.outputs.version_tag}}\",\"java_version\":\"17\",\"db_name\":\"petclinicdb\"}"
            delimiter=","
          fi
          if [[ "${{steps.semver_grafana_version.outputs.changed}}" == "true" && "${{steps.semver_grafana_version.outputs.is_tagged}}" == "false" || "$forceRelease" == "true" ]]; then
            matrix_utils="$matrix_utils${delimiter_utils}{\"artifact_name\":\"grafana\",\"version\":\"${{steps.semver_grafana_version.outputs.version}}\",\"version_tag\":\"${{steps.semver_grafana_version.outputs.version_tag}}\",\"db_name\":\"\"}"
            delimiter_utils=","
          fi
          if [[ "${{steps.semver_prometheus_version.outputs.changed}}" == "true" && "${{steps.semver_prometheus_version.outputs.is_tagged}}" == "false" || "$forceRelease" == "true" ]]; then
            matrix_utils="$matrix_utils${delimiter_utils}{\"artifact_name\":\"prometheus\",\"version\":\"${{steps.semver_prometheus_version.outputs.version}}\",\"version_tag\":\"${{steps.semver_prometheus_version.outputs.version_tag}}\",\"db_name\":\"\"}"
            delimiter_utils=","
          fi
          if [[ "${{steps.semver_zipkin_version.outputs.changed}}" == "true" && "${{steps.semver_zipkin_version.outputs.is_tagged}}" == "false" || "$forceRelease" == "true" ]]; then
            matrix_utils="$matrix_utils${delimiter_utils}{\"artifact_name\":\"zipkin\",\"version\":\"${{steps.semver_zipkin_version.outputs.version}}\",\"version_tag\":\"${{steps.semver_zipkin_version.outputs.version_tag}}\",\"db_name\":\"\"}"
            delimiter_utils=","
          fi
          if [[ "$delimiter" == "" ]]; then
            matrix=""
            echo "matrix=\"\"" >> $GITHUB_OUTPUT
            echo "something_to_deploy=false" >> $GITHUB_OUTPUT
          else
            matrix="$matrix]}"
            echo "matrix=${matrix}" >> $GITHUB_OUTPUT
            echo "something_to_deploy=true" >> $GITHUB_OUTPUT
          fi
          if [[ "$delimiter_utils" == "" ]]; then
            matrix_utils=""
            echo "matrix_utils=\"\"" >> $GITHUB_OUTPUT
            echo "something_to_deploy_utils=false" >> $GITHUB_OUTPUT
          else
            matrix_utils="$matrix_utils]}"
            echo "matrix_utils=${matrix_utils}" >> $GITHUB_OUTPUT
            echo "something_to_deploy_utils=true" >> $GITHUB_OUTPUT
          fi
          echo "matrix: ${matrix}"
          echo "matrix_utils: ${matrix_utils}"
  
  release_deploy_app:
    needs: [versions]
    runs-on: ubuntu-latest
    if: ${{ contains(needs.versions.outputs.something_to_deploy, 'true') }}
    permissions:
      contents: write
      packages: write
      id-token: write

    strategy:
      max-parallel: 1
      matrix: ${{fromJson(needs.versions.outputs.matrix)}}
    env:
      ARTIFACT_NAME: ${{ matrix.artifact_name }}
      VERSION: ${{ matrix.version }}
      VERSION_TAG: ${{ matrix.version_tag }}
      #RELEASE_DIR_NAME: "${{matrix.artifact_name}}-${{matrix.version}}"
      JAVA_VERSION: ${{ matrix.java_version }}
      DB_NAME: ${{ matrix.db_name }}
    outputs:
      ARTIFACT_NAME: ${{ steps.build_container.outputs.ARTIFACT_NAME }}
      VERSION: ${{ steps.build_container.outputs.VERSION }}
    defaults:
      run:
        working-directory: ${{matrix.artifact_name}}
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Display parameters
      run: |
        echo "ARTIFACT_NAME=${{env.ARTIFACT_NAME}}"
        echo "VERSION=${{env.VERSION}}"
        echo "VERSION_TAG=${{env.VERSION_TAG}}"
        echo "RELEASE_DIR_NAME=${{env.ARTIFACT_NAME}}-${{env.VERSION}}"
        echo "JAVA_VERSION=${{env.JAVA_VERSION}}"
        echo "GITHUB_SHA=${{github.sha}}"
        echo "GITHUB_REF=${{github.ref}}"
        echo "GITHUB_EVENT_NAME=${{github.event_name}}"
        
    - name: Set up JDK
      uses: actions/setup-java@v3
      with:
        java-version: ${{env.JAVA_VERSION}}
        distribution: 'microsoft'

    - name: Set the release version
      run: |
        mv ./pom.xml ./pom.xml.bak
        ls -la
        java ../scripts/deployment/utils/JavaUtils.java -update_pom_version ./pom.xml.bak ${{env.VERSION}} ./pom.xml

    - name: Set the git commit id
      run: |
        mv ./pom.xml ./pom.xml.bak
        ls -la
        java ../scripts/deployment/utils/JavaUtils.java -update_git_commit_id ./pom.xml.bak "${GITHUB_SHA}" ./pom.xml
    
    - name: Build the .jar
      run: |
        export PORT=8080
        export SPRING_PROFILES_ACTIVE=local
        mvn clean package -DskipTests
    
    - name: Download Application Insights Agent
      run: |
         wget -q -O ./target/ai.jar https://github.com/microsoft/ApplicationInsights-Java/releases/download/3.4.12/applicationinsights-agent-3.4.12.jar
    
    - name: Build release ZIP archive
      id: create_archive
      run: |
        ls -la ./target
        if [[ ! -f "./target/${{env.ARTIFACT_NAME}}-${{env.VERSION}}.jar" ]]; then
          echo "File ./target/${{env.ARTIFACT_NAME}}-${{env.VERSION}}.jar does not exists. Check the build script."
          exit 1
        fi
        mkdir ./${{env.ARTIFACT_NAME}}-${{env.VERSION}}
        mv ./target/${{env.ARTIFACT_NAME}}-${{env.VERSION}}.jar ./${{env.ARTIFACT_NAME}}-${{env.VERSION}}
        mv ./target/ai.jar ./${{env.ARTIFACT_NAME}}-${{env.VERSION}}
        cp -R ../docker/Dockerfile.JAVA${{env.JAVA_VERSION}} ./${{env.ARTIFACT_NAME}}-${{env.VERSION}}/Dockerfile
        cp -R ./k8s ./${{env.ARTIFACT_NAME}}-${{env.VERSION}}/k8s
        if [[ -d "./src/main/resources/db" ]]; then
          cp -R ./src/main/resources/db ./${{env.ARTIFACT_NAME}}-${{env.VERSION}}/db
        fi
        zip -r ${{env.ARTIFACT_NAME}}-${{env.VERSION}}.zip ./${{env.ARTIFACT_NAME}}-${{env.VERSION}}
        ls -la
        echo "RELEASE_NAME=${{env.ARTIFACT_NAME}}-${{env.VERSION}}" >> $GITHUB_OUTPUT

    # Only for troubleshooting, otherwise not needed
    # - name: Upload build artifact
    #   uses: actions/upload-artifact@v3
    #   with:
    #     name: ${{env.ARTIFACT_NAME}}-${{env.VERSION}}
    #     path: ./${{env.ARTIFACT_NAME}}/${{env.ARTIFACT_NAME}}-${{env.VERSION}}.zip
    #     if-no-files-found: error
    #     retention-days: 1          

    - name: Release build artifact
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        ls -la ${{env.ARTIFACT_NAME}}-${{env.VERSION}}.zip
        gh release create ${{env.VERSION_TAG}} ${{env.ARTIFACT_NAME}}-${{env.VERSION}}.zip --notes "Auto release ${{env.VERSION_TAG}}"

    - name: Azure login # https://learn.microsoft.com/en-us/azure/developer/github/connect-from-azure
      uses: azure/login@v1
      with:
        client-id: ${{secrets.AAD_CLIENT_ID}}
        tenant-id: ${{secrets.AAD_TENANT_ID}}
        subscription-id: ${{secrets.CONTAINER_REGISTRY_SUBSCRIPTION_ID}}        

    - name: Build a new container image
      id: build_container
      run: |
        cd ./${{env.ARTIFACT_NAME}}-${{env.VERSION}}
        ls -la
        mv ./Dockerfile ./Dockerfile.tmp
        # Dockerfile syntax is driving me bonkers. This should work...
        cat ./Dockerfile.tmp | ARTIFACT_NAME_ARG=${{env.ARTIFACT_NAME}} VERSION_ARG=${{env.VERSION}} envsubst > ./Dockerfile
        cat ./Dockerfile

        az acr build ./ -r ${{secrets.CONTAINER_REGISTRY_NAME}} -t "${{env.ARTIFACT_NAME}}:${{env.VERSION}}" --file ./Dockerfile
        cd ..

    - name: Add DB Firewall exception used for Schema sync
      if: ${{ env.DB_NAME != '' }}
      run: |
        deploymentClientIP=`dig +short myip.opendns.com @resolver1.opendns.com.`
        az postgres flexible-server firewall-rule create --rule-name "AllowDeploymentClientIP" --resource-group ${{secrets.PGSQL_RESOURCE_GROUP}} --name ${{secrets.PGSQL_NAME}} --start-ip-address ${deploymentClientIP} --subscription "${{secrets.PGSQL_SUBSCRIPTION_ID}}"
  
    - name: Synchronize DB Schema
      if: ${{ env.DB_NAME != '' }}
      env:
        PGSQL_SERVER_NAME: '${{secrets.PGSQL_NAME}}.postgres.database.azure.com'
      run: |
        export PGPASSWORD=`az account get-access-token --resource-type oss-rdbms --query "[accessToken]" --output tsv`
        psql --set=sslmode=require -h "${{env.PGSQL_SERVER_NAME}}" -p 5432 -d "${{env.DB_NAME}}" -U "${{secrets.DBA_GROUP_NAME}}" --file=./${{env.ARTIFACT_NAME}}-${{env.VERSION}}/db/pgsql/schema.sql -v ON_ERROR_STOP=1
        psql --set=sslmode=require -h "${{env.PGSQL_SERVER_NAME}}" -p 5432 -d "${{env.DB_NAME}}" -U "${{secrets.DBA_GROUP_NAME}}" --file=./${{env.ARTIFACT_NAME}}-${{env.VERSION}}/db/pgsql/data.sql -v ON_ERROR_STOP=1

    - name: Test connection to AKS
      run: |
        az aks command invoke \
          --resource-group ${{secrets.AKS_RESOURCE_GROUP}} \
          --name ${{secrets.AKS_NAME}} \
          --command "kubectl get ns"

    - name: Deploy app into AKS
      env:
        DEPLOYMENT_SUFFIX: ""
        CONTAINER_IMAGE: ${{secrets.CONTAINER_REGISTRY_NAME}}.azurecr.io/${{env.ARTIFACT_NAME}}:${{env.VERSION}}
      run: |
        cat ./${{env.ARTIFACT_NAME}}-${{env.VERSION}}/k8s/deployment.yml | CONTAINER_IMAGE=${{env.CONTAINER_IMAGE}} DEPLOYMENT_SUFFIX=${{env.DEPLOYMENT_SUFFIX}} envsubst > ./deployment.yml.tmp
        cat ./deployment.yml.tmp
        az aks command invoke \
          --resource-group ${{secrets.AKS_RESOURCE_GROUP}} \
          --name ${{secrets.AKS_NAME}} \
          --command "kubectl apply -f deployment.yml.tmp" \
          --file deployment.yml.tmp

    - name: Remove DB Firewall exception used for Schema sync
      if: ${{ env.DB_NAME != '' }}
      run: |
        az postgres flexible-server firewall-rule delete --rule-name "AllowDeploymentClientIP" -g ${{secrets.PGSQL_RESOURCE_GROUP}} --name ${{secrets.PGSQL_NAME}} --subscription "${{secrets.PGSQL_SUBSCRIPTION_ID}}" --yes
      
  # deploy_app:
  #   needs: [release_app]
  #   uses: ./.github/workflows/99-continuous-delivery.yml
  #   with:
  #     app_name: "${{needs.release_app.outputs.ARTIFACT_NAME}}"
  #     version: "${{needs.release_app.outputs.VERSION}}"
  #   secrets: inherit     
     
  # release_utils:
  #   needs: [versions]
  #   runs-on: ubuntu-latest
  #   if: ${{ contains(needs.versions.outputs.something_to_deploy_utils, 'true') }}
  #   permissions:
  #     contents: write
  #     packages: write
  #     id-token: write

  #   strategy:
  #     max-parallel: 0
  #     matrix: ${{fromJson(needs.versions.outputs.matrix_utils)}}
  #   env:
  #     ARTIFACT_NAME: ${{ matrix.artifact_name }}
  #     VERSION: ${{ matrix.version }}
  #     VERSION_TAG: ${{ matrix.version_tag }}
  #   outputs:
  #     ARTIFACT_NAME: ${{ steps.build_container.outputs.ARTIFACT_NAME }}
  #     VERSION: ${{ steps.build_container.outputs.VERSION }}
  #   defaults:
  #     run:
  #       working-directory: docker/${{matrix.artifact_name}}
  #   steps:
  #   - name: Checkout
  #     uses: actions/checkout@v3
  #     with:
  #       fetch-depth: 0

  #   - name: Display parameters
  #     run: |
  #       echo "ARTIFACT_NAME=${{env.ARTIFACT_NAME}}"
  #       echo "VERSION=${{env.VERSION}}"
  #       echo "VERSION_TAG=${{env.VERSION_TAG}}"
  #       echo "GITHUB_SHA=${{github.sha}}"
  #       echo "GITHUB_REF=${{github.ref}}"
  #       echo "GITHUB_EVENT_NAME=${{github.event_name}}"
    
  #   - name: Build release ZIP archive
  #     id: create_archive
  #     run: |
  #       ls -la
  #       zip -r ${{env.ARTIFACT_NAME}}-${{env.VERSION}}.zip ./
  #       ls -la
  #       echo "RELEASE_NAME=${{env.ARTIFACT_NAME}}-${{env.VERSION}}" >> $GITHUB_OUTPUT

  #   # Only for troubleshooting, otherwise not needed
  #   # - name: Upload build artifact
  #   #   uses: actions/upload-artifact@v3
  #   #   with:
  #   #     name: ${{env.ARTIFACT_NAME}}-${{env.VERSION}}
  #   #     path: ./${{env.ARTIFACT_NAME}}-${{env.VERSION}}.zip
  #   #     if-no-files-found: error
  #   #     retention-days: 1          

  #   - name: Release build artifact
  #     env:
  #       GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #     run: |
  #       ls -la ${{env.ARTIFACT_NAME}}-${{env.VERSION}}.zip
  #       gh release create ${{env.VERSION_TAG}} ${{env.ARTIFACT_NAME}}-${{env.VERSION}}.zip --notes "Auto release ${{env.VERSION_TAG}}"

  #   - name: Azure login # https://learn.microsoft.com/en-us/azure/developer/github/connect-from-azure
  #     uses: azure/login@v1
  #     with:
  #       client-id: ${{secrets.AAD_CLIENT_ID}}
  #       tenant-id: ${{secrets.AAD_TENANT_ID}}
  #       subscription-id: ${{secrets.CONTAINER_REGISTRY_SUBSCRIPTION_ID}}        

  #   - name: Build a new container image
  #     id: build_container
  #     run: |
  #       rm ${{env.ARTIFACT_NAME}}-${{env.VERSION}}.zip
  #       ls -la
  #       az acr build ./ -r ${{secrets.CONTAINER_REGISTRY_NAME}} -t "${{env.ARTIFACT_NAME}}:${{env.VERSION}}" --build-arg BUILD_VERSION_ARG=${{env.VERSION}} --file ./Dockerfile
  #       echo "ARTIFACT_NAME=${{env.ARTIFACT_NAME}}" >> "$GITHUB_OUTPUT"
  #       echo "VERSION=${{env.VERSION}}" >> "$GITHUB_OUTPUT"

  # deploy_utils:
  #   needs: [release_utils]
  #   uses: ./.github/workflows/99-continuous-delivery.yml
  #   with:
  #     app_name: ${{needs.release_utils.outputs.ARTIFACT_NAME}}
  #     version: ${{needs.release_utils.outputs.VERSION}}
  #   secrets: inherit
      